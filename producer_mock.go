// Code generated by MockGen. DO NOT EDIT.
// Source: producer.go
//
// Generated by this command:
//
//	mockgen -source=producer.go -package=kafka -destination=producer_mock.go
//

// Package kafka is a generated GoMock package.
package go_kafka

import (
	reflect "reflect"

	sarama "github.com/IBM/sarama"
	gomock "go.uber.org/mock/gomock"
	proto "google.golang.org/protobuf/proto"
)

// MockAsyncProducer is a mock of AsyncProducer interface.
type MockAsyncProducer struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncProducerMockRecorder
}

// MockAsyncProducerMockRecorder is the mock recorder for MockAsyncProducer.
type MockAsyncProducerMockRecorder struct {
	mock *MockAsyncProducer
}

// NewMockAsyncProducer creates a new mock instance.
func NewMockAsyncProducer(ctrl *gomock.Controller) *MockAsyncProducer {
	mock := &MockAsyncProducer{ctrl: ctrl}
	mock.recorder = &MockAsyncProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncProducer) EXPECT() *MockAsyncProducerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockAsyncProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAsyncProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAsyncProducer)(nil).Close))
}

// SendBytes mocks base method.
func (m *MockAsyncProducer) SendBytes(topic string, key sarama.Encoder, data []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendBytes", topic, key, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendBytes indicates an expected call of SendBytes.
func (mr *MockAsyncProducerMockRecorder) SendBytes(topic, key, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendBytes", reflect.TypeOf((*MockAsyncProducer)(nil).SendBytes), topic, key, data)
}

// SendJSON mocks base method.
func (m *MockAsyncProducer) SendJSON(topic string, key sarama.Encoder, v any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendJSON", topic, key, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendJSON indicates an expected call of SendJSON.
func (mr *MockAsyncProducerMockRecorder) SendJSON(topic, key, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendJSON", reflect.TypeOf((*MockAsyncProducer)(nil).SendJSON), topic, key, v)
}

// SendMessage mocks base method.
func (m *MockAsyncProducer) SendMessage(msg *sarama.ProducerMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockAsyncProducerMockRecorder) SendMessage(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockAsyncProducer)(nil).SendMessage), msg)
}

// SendProto mocks base method.
func (m *MockAsyncProducer) SendProto(topic string, key sarama.Encoder, v proto.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendProto", topic, key, v)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendProto indicates an expected call of SendProto.
func (mr *MockAsyncProducerMockRecorder) SendProto(topic, key, v any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendProto", reflect.TypeOf((*MockAsyncProducer)(nil).SendProto), topic, key, v)
}
