// Code generated by MockGen. DO NOT EDIT.
// Source: ./vendor/github.com/IBM/sarama/async_producer.go
//
// Generated by this command:
//
//	mockgen -source=./vendor/github.com/IBM/sarama/async_producer.go -imports=sarama=github.com/IBM/sarama -package=kafka -mock_names=AsyncProducer=MockSaramaAsyncProducer -destination=async_producer_mock_test.go
//

// Package kafka is a generated GoMock package.
package go_kafka

import (
	reflect "reflect"

	"github.com/IBM/sarama"
	gomock "go.uber.org/mock/gomock"
)

// MockSaramaAsyncProducer is a mock of AsyncProducer interface.
type MockSaramaAsyncProducer struct {
	ctrl     *gomock.Controller
	recorder *MockSaramaAsyncProducerMockRecorder
}

// MockSaramaAsyncProducerMockRecorder is the mock recorder for MockSaramaAsyncProducer.
type MockSaramaAsyncProducerMockRecorder struct {
	mock *MockSaramaAsyncProducer
}

// NewMockSaramaAsyncProducer creates a new mock instance.
func NewMockSaramaAsyncProducer(ctrl *gomock.Controller) *MockSaramaAsyncProducer {
	mock := &MockSaramaAsyncProducer{ctrl: ctrl}
	mock.recorder = &MockSaramaAsyncProducerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSaramaAsyncProducer) EXPECT() *MockSaramaAsyncProducerMockRecorder {
	return m.recorder
}

// AbortTxn mocks base method.
func (m *MockSaramaAsyncProducer) AbortTxn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortTxn")
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortTxn indicates an expected call of AbortTxn.
func (mr *MockSaramaAsyncProducerMockRecorder) AbortTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortTxn", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).AbortTxn))
}

// AddMessageToTxn mocks base method.
func (m *MockSaramaAsyncProducer) AddMessageToTxn(msg *sarama.ConsumerMessage, groupId string, metadata *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMessageToTxn", msg, groupId, metadata)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMessageToTxn indicates an expected call of AddMessageToTxn.
func (mr *MockSaramaAsyncProducerMockRecorder) AddMessageToTxn(msg, groupId, metadata any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMessageToTxn", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).AddMessageToTxn), msg, groupId, metadata)
}

// AddOffsetsToTxn mocks base method.
func (m *MockSaramaAsyncProducer) AddOffsetsToTxn(offsets map[string][]*sarama.PartitionOffsetMetadata, groupId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddOffsetsToTxn", offsets, groupId)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddOffsetsToTxn indicates an expected call of AddOffsetsToTxn.
func (mr *MockSaramaAsyncProducerMockRecorder) AddOffsetsToTxn(offsets, groupId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddOffsetsToTxn", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).AddOffsetsToTxn), offsets, groupId)
}

// AsyncClose mocks base method.
func (m *MockSaramaAsyncProducer) AsyncClose() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AsyncClose")
}

// AsyncClose indicates an expected call of AsyncClose.
func (mr *MockSaramaAsyncProducerMockRecorder) AsyncClose() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncClose", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).AsyncClose))
}

// BeginTxn mocks base method.
func (m *MockSaramaAsyncProducer) BeginTxn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTxn")
	ret0, _ := ret[0].(error)
	return ret0
}

// BeginTxn indicates an expected call of BeginTxn.
func (mr *MockSaramaAsyncProducerMockRecorder) BeginTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTxn", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).BeginTxn))
}

// Close mocks base method.
func (m *MockSaramaAsyncProducer) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSaramaAsyncProducerMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).Close))
}

// CommitTxn mocks base method.
func (m *MockSaramaAsyncProducer) CommitTxn() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTxn")
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTxn indicates an expected call of CommitTxn.
func (mr *MockSaramaAsyncProducerMockRecorder) CommitTxn() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTxn", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).CommitTxn))
}

// Errors mocks base method.
func (m *MockSaramaAsyncProducer) Errors() <-chan *sarama.ProducerError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Errors")
	ret0, _ := ret[0].(<-chan *sarama.ProducerError)
	return ret0
}

// Errors indicates an expected call of Errors.
func (mr *MockSaramaAsyncProducerMockRecorder) Errors() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errors", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).Errors))
}

// Input mocks base method.
func (m *MockSaramaAsyncProducer) Input() chan<- *sarama.ProducerMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input")
	ret0, _ := ret[0].(chan<- *sarama.ProducerMessage)
	return ret0
}

// Input indicates an expected call of Input.
func (mr *MockSaramaAsyncProducerMockRecorder) Input() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).Input))
}

// IsTransactional mocks base method.
func (m *MockSaramaAsyncProducer) IsTransactional() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTransactional")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTransactional indicates an expected call of IsTransactional.
func (mr *MockSaramaAsyncProducerMockRecorder) IsTransactional() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTransactional", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).IsTransactional))
}

// Successes mocks base method.
func (m *MockSaramaAsyncProducer) Successes() <-chan *sarama.ProducerMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Successes")
	ret0, _ := ret[0].(<-chan *sarama.ProducerMessage)
	return ret0
}

// Successes indicates an expected call of Successes.
func (mr *MockSaramaAsyncProducerMockRecorder) Successes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Successes", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).Successes))
}

// TxnStatus mocks base method.
func (m *MockSaramaAsyncProducer) TxnStatus() sarama.ProducerTxnStatusFlag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxnStatus")
	ret0, _ := ret[0].(sarama.ProducerTxnStatusFlag)
	return ret0
}

// TxnStatus indicates an expected call of TxnStatus.
func (mr *MockSaramaAsyncProducerMockRecorder) TxnStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxnStatus", reflect.TypeOf((*MockSaramaAsyncProducer)(nil).TxnStatus))
}
